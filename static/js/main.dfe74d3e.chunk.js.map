{"version":3,"sources":["components/Layout/Header.js","components/Layout/Index.js","components/Pages/Home.js","components/Pages/Other.js","Routes.js","components/App.js","serviceWorker.js","index.js"],"names":["StyleHeader","styled","header","className","to","StyleMain","main","withRouter","children","location","pathname","history","route","Header","StyleHome","div","locationName","split","animeBox","useRef","useEffect","anime","timeline","easing","duration","loop","add","targets","current","translateX","borderRadius","scale","backgroundColor","translateY","toUpperCase","ref","Routes","exact","path","component","Other","Home","from","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kgCAKA,IAAMA,EAAcC,UAAOC,OAAV,KAwCF,aACb,OACE,kBAACF,EAAD,KACE,yBAAKG,UAAU,QACb,kBAAC,IAAD,CAAgBA,UAAU,aAC1B,wBAAIA,UAAU,aACZ,4BAAK,kBAAC,IAAD,CAAMC,GAAG,SAAT,SACL,4BAAK,kBAAC,IAAD,CAAMA,GAAG,UAAT,c,2FC7Cf,IAAMC,EAAYJ,UAAOK,KAAV,KAcAC,eAXA,SAAC,GAA0D,IAAxDC,EAAuD,EAAvDA,SAAuD,EAA7CC,SAAYC,SAAiC,EAArBC,QAAqB,EAAZC,MAC3D,OACE,oCACE,kBAAC,QAAD,MACA,kBAACC,EAAD,MACA,kBAACR,EAAD,KACGG,O,iXCXT,IAAMM,EAAYb,UAAOc,IAAV,KAmBA,cAA8B,IACrCC,EADoC,EAA3BP,SAAYC,SACGO,MAAM,KAC9BC,EAAWC,iBAAO,MAoCxB,OAnCAC,qBAAU,WACRC,IAAMC,SAAS,CACbC,OAAQ,gBACRC,SAAU,IACVC,MAAM,IAEPC,IAAI,CACHC,QAAST,EAASU,QAClBC,WAAY,CAAC,EAAE,KACfC,aAAc,CAAC,KAAM,OACrBC,MAAO,GACPC,gBAAgB,YAEjBN,IAAI,CACHC,QAAST,EAASU,QAClBK,WAAY,CAAC,EAAE,KACfH,aAAc,CAAC,MAAO,MACtBC,MAAO,EACPC,gBAAgB,SAEjBN,IAAI,CACHC,QAAST,EAASU,QAClBC,WAAY,CAAC,IAAI,GACjBC,aAAc,CAAC,KAAM,OACrBC,MAAO,GACPC,gBAAgB,YAEjBN,IAAI,CACHC,QAAST,EAASU,QAClBK,WAAY,CAAC,IAAI,GACjBH,aAAc,CAAC,MAAO,MACtBC,MAAO,EACPC,gBAAgB,cAElB,CAACd,IAED,kBAACJ,EAAD,KACE,yBAAKX,UAAU,SAAf,WAA+B,8BAAOa,EAAa,GAAGkB,gBACtD,yBAAK/B,UAAU,WACbgC,IAAKjB,M,iRC/Db,IAAMJ,EAAYb,UAAOc,IAAV,KAcA,cAA8B,IACrCC,EADoC,EAA3BP,SAAYC,SACGO,MAAM,KACpC,OACE,kBAAC,EAAD,KACE,yBAAKd,UAAU,SAAf,WAA+B,8BAAOa,EAAa,GAAGkB,kBCdtDE,EAAS,kBACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAWC,IACtC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,QAAQC,UAAWE,IACrC,kBAAC,IAAD,CAAUC,KAAK,IAAItC,GAAG,QAAQmC,UAAWE,MAG9B,oBACb,kBAAC,EAAD,KACE,kBAAC,EAAD,QCLWE,MAPf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOpC,SAASqC,UAEe,UAA7BD,OAAOpC,SAASqC,UAEhBD,OAAOpC,SAASqC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dfe74d3e.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { GiDivingHelmet } from \"react-icons/gi\";\nimport { Link } from \"react-router-dom\";\n\nconst StyleHeader = styled.header`\n  position:fixed;\n  top:0;\n  width:100%;\n  height:70px;\n  padding:15px 0;\n  box-sizing:border-box;\n  background-color:#000;\n  .wrap {\n    width:1000px;\n    margin: 0 auto;\n    display:flex;\n    align-items:center;\n    justify-content:space-between;\n  };\n  .svg-logo {\n    fill:#00e5fb;\n    width:40px;\n    height:40px;\n    cursor: pointer;\n  }\n  .link-list {\n    display:flex;\n    li {\n      display:inline-block;\n      color:#fff;\n      font-size:14px;\n      margin-right:20px;\n      transition:.2s;\n      cursor: pointer;\n      &:hover { opacity:0.6; }\n      &:last-child { margin-right:0; }\n    };\n    a { \n      display:block;\n      color:unset;\n      text-decoration:none;\n    };\n  };\n`\nexport default ()=> {\n  return (\n    <StyleHeader>\n      <div className=\"wrap\">\n        <GiDivingHelmet className=\"svg-logo\"/>\n        <ul className=\"link-list\">\n          <li ><Link to=\"/home\">HOME</Link></li>\n          <li ><Link to=\"/other\">OTHER</Link></li>\n        </ul>\n      </div>\n    </StyleHeader>\n  )\n};","import React from \"react\";\nimport styled from \"styled-components\";\nimport { withRouter } from \"react-router\";\n// components\nimport { Reset } from 'styled-reset'\nimport Header from \"./Header\";\n\nconst StyleMain = styled.main`\n  margin-top:70px;\n`\nconst Layout = ({ children, location: { pathname }, history, route }) => {\n  return (\n    <>\n      <Reset/>\n      <Header/>\n      <StyleMain>\n        {children}\n      </StyleMain>\n    </>\n  )\n};\nexport default withRouter(Layout);","import React, { useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport anime from \"animejs\";\n\n\nconst StyleHome = styled.div`\n  width:1000px;\n  margin: 0 auto;\n  .title {\n    padding:10px 0;\n    font-weight:bold;\n    font-size:20px;\n    color:#757575;\n    span {\n      font-size:24px;\n      color:#333333;\n    }\n  }\n  .animeBox {\n    width:80px;\n    height:80px;\n    background-color:\"#E32636\";\n  }\n`\nexport default ({location: { pathname }})=> {\n  const locationName = pathname.split(\"/\");\n  const animeBox = useRef(null);\n  useEffect(()=>{\n    anime.timeline({\n      easing: 'easeInOutQuad',\n      duration: 800,\n      loop: true\n    })\n    .add({\n      targets: animeBox.current,\n      translateX: [0,200],\n      borderRadius: ['0%', '50%'],\n      scale: 0.8,\n      backgroundColor:'#00BFFF'\n    })\n    .add({\n      targets: animeBox.current,\n      translateY: [0,150],\n      borderRadius: ['50%', '0%'],\n      scale: 1,\n      backgroundColor:'#000'\n    })\n    .add({\n      targets: animeBox.current,\n      translateX: [200,0],\n      borderRadius: ['0%', '50%'],\n      scale: 0.8,\n      backgroundColor:'#66FF00'\n    })\n    .add({\n      targets: animeBox.current,\n      translateY: [150,0],\n      borderRadius: ['50%', '0%'],\n      scale: 1,\n      backgroundColor:\"#E32636\"\n    })\n  },[animeBox])\n  return (\n    <StyleHome>\n      <div className=\"title\">this is <span>{locationName[1].toUpperCase()}</span></div>\n      <div className=\"animeBox\" \n        ref={animeBox}\n        // onMouseOver={()=>{\n        //   anime({\n        //     targets: animeBox.current,\n        //     translateX: [0,200],\n        //     duration: 1000,\n        //   });\n        // }}\n        // onMouseLeave={()=>{\n        //   anime({\n        //     targets: animeBox.current,\n        //     translateX: [200,0],\n        //     duration: 1000,\n        //   });\n        // }}\n      />\n    </StyleHome>\n  );\n};","import React from \"react\";\nimport styled from \"styled-components\";\n\nconst StyleHome = styled.div`\n  width:1000px;\n  margin: 0 auto;\n  .title {\n    padding:10px 0;\n    font-weight:bold;\n    font-size:20px;\n    color:#757575;\n    span {\n      font-size:24px;\n      color:#333333;\n    }\n  }\n`\nexport default ({location: { pathname }})=> {\n  const locationName = pathname.split(\"/\");\n  return (\n    <StyleHome>\n      <div className=\"title\">this is <span>{locationName[1].toUpperCase()}</span></div>\n    </StyleHome>\n  );\n};","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n// components\nimport Layout from \"./components/Layout/Index\";\nimport Home from \"./components/Pages/Home\";\nimport Other from \"./components/Pages/Other\";\n\nconst Routes = () => (\n  <Switch>\n    <Route exact path=\"/other\" component={Other} />\n    <Route exact path=\"/home\" component={Home} />\n    <Redirect from=\"/\" to=\"/home\" component={Home} />\n  </Switch>\n);\nexport default () => (\n  <Layout>\n    <Routes />\n  </Layout>\n);","import React from 'react';\nimport { HashRouter } from \"react-router-dom\";\nimport Routes from \"../Routes\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Routes />\n    </HashRouter>\n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}